var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TextSpace","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#TextSpace","page":"Home","title":"TextSpace","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TextSpace.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TextSpace]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"#TextSpace.clean_text-Tuple{String}","page":"Home","title":"TextSpace.clean_text","text":"clean_text(text::String; normalize::Bool=true, remove_punctuation::Bool=false, remove_emojis::Bool=false) -> String\n\nCleans the given text by:\n\nOptionally normalizing Unicode characters.\nConverting the text to lowercase.\nOptionally removing punctuation.\nOptionally removing emojis.\nNormalizing whitespace.\n\nExamples\n\n```julia julia> cleantext(\"Hello, Julia! ðŸ˜Š\", removepunctuation=true, remove_emojis=true) \"hello julia\"\n\n\n\n\n\n","category":"method"},{"location":"#TextSpace.tokenize-Tuple{String}","page":"Home","title":"TextSpace.tokenize","text":"tokenize(text::String; mode::Symbol=:word) -> Vector{String}\n\nTokenizes the input text into a vector of tokens.  \n\nIf mode is :word (default), the text is split into word-level tokens.\nIf mode is :char, the text is split into individual characters.\n\nExamples\n\n```julia julia> tokenize(\"Hello, Julia! ðŸ˜Š\", mode=:word) [\"hello\", \",\", \"julia\", \"!\", \"ðŸ˜Š\"]\n\njulia> tokenize(\"Hello, Julia! ðŸ˜Š\", mode=:char) ['h', 'e', 'l', 'l', 'o', ',', ' ', 'j', 'u', 'l', 'i', 'a', '!', ' ', 'ðŸ˜Š']\n\n\n\n\n\n","category":"method"}]
}
